let config = matches.get_many::<String>("config").unwrap_or_default().into_iter().map(|v| v.as_str()).collect::<Vec<_>>();

        if config.len() != 0 {
            if !config[0].contains(".cly.json") {
                error!("{}", "Not a configuration file.".to_string());
                process::exit(2);
            }

            info!("{}", format!("Using configuration file: {}", config[0].if_supports_color(Stdout, |text| text.purple()).blue()));
        } else {
            info!("Scanning for config files...");
            match util::find_file(".catalyst/", vec!["config.cly.json"]) {
                Err(_) => {
                    error!("{}", "No config file found.".to_string());
                    println!("{}", "No config file found. Please create a configuration file as i don't know what this directory is...".to_string().bold().yellow());
                    process::exit(1);
                }
                Ok(path) => {
                    info!("Found config file: {}", path.display().to_string().if_supports_color(Stdout, |text| text.purple()));
                    let config = path.display().to_string();
                    info!("Parsing...");
                    conf = match fs::read_to_string(config) {
                        Err(_) => {
                            error!("{}", "Cannot read configuration file.".to_string());
                            process::exit(3);
                        }
                        Ok(cf) => match serde_json::from_str(&cf) {
                            Err(_) => {
                                error!("{}", "Inavlid configuration file.".to_string());
                                process::exit(4);
                            }
                            Ok(c) => c,
                        },
                    };
                }
            }
    }